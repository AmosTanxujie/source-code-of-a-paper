function [objF, conV, num_of_constrain]=fitnessRealWordApplication(P, problem, aaa,weights)
global gen  learningGenNum
popsize = size(P,1);

g = [];
switch problem
    case 1
        %Welded beam design
        G = 12e6;E = 3e7;P1 = 6e3; L=14;
        tao_max = 13600 * ones(popsize,1);
        Deta_max = 0.25 * ones(popsize,1);
        AA_max = 30000 * ones(popsize,1);
        Pc = ((4.013*E*sqrt((P(:, 3).^2 .* P(:, 4).^6)/36))/L^2) .* (1-(P(:, 3)/(2*L)) * sqrt(E/(4*G)));
        Deta = (6*P1*L^3)./(E*P(:, 3).^3 .*P(:, 4));
        AA = (6*P1*L)./(P(:, 3).^2 .*P(:, 4));
        R = sqrt(P(:, 2).^2 / 4 + ((P(:, 1)+P(:, 3))/2).^2);
        J = 2*(sqrt(2)*(P(:, 1).*P(:, 2)) .* (P(:, 2).^2 / 4 + ((P(:, 1)+P(:, 3))/2).^2));
        M = P1*(L+P(:, 2)/2);
        tao2 = M .* R ./ J;
        tao1 = P1./(sqrt(2)*P(:, 1).*P(:, 2));
        tao = sqrt(tao1.^2 + 2*tao1.*tao2.*(P(:, 2)./(2*R))+tao2.^2 );
        
        
        g(:,1) = tao - tao_max;
        g(:,2) = AA - AA_max;
        g(:,3) = P(:, 1) - P(:, 4);
        g(:,4) = 0.125 - P(:, 1);
        g(:,5) = Deta - Deta_max;
        g(:,6) = P1 - Pc;
        g(:,7) = 1.10471*P(:, 1).^2 + 0.04811*P(:, 3).*P(:, 4).*(14+P(:, 2)) - 5;
        f = 1.10471*P(:, 1).^2 .* P(:, 2) + 0.04811*P(:, 3).*P(:, 4) .*(14+P(:, 2));
        
    case 2
        %Tension/compression spring design [0.0506266204030336,0.26922288639058,7.40132903632849], [0.0506266204030336,0.26222288639058,6.90132903632849]
        g(:,1) = 1-((P(:, 2).^2 .* P(:, 3))./(71785 * P(:, 1).^4)) ;
        g(:,2) = (4*P(:, 2).^2-P(:, 1).*P(:, 2))./(12566 *(P(:, 2).*P(:, 1).^3)-P(:, 1).^4) + 1./(5108 *P(:, 1).^2) - 1;
        g(:,3) = 1 - (140.45*P(:, 1))./(P(:, 2).^2 .* P(:, 3));
        g(:,4) =  (P(:, 1) + P(:, 2))/1.5 - 1;
        f = (P(:, 3) + 2) .* P(:, 2) .* P(:, 1).^2;
    case 3
        %Pressure vessel design
        
        g(:,1) = -P(:, 1) + 0.0193 * P(:, 3);
        g(:,2) = -P(:, 2) + 0.00954 * P(:, 3);
        g(:,3) = - pi * P(:, 3).^2 .* P(:, 4) - (4/3) * pi * P(:, 3).^3 + 1296000;
        g(:,4) =  P(:, 4) - 240;
        f = 0.6224 * P(:, 1) .* P(:, 3) .* P(:, 4) + 1.7781 * P(:, 2) .* P(:, 3).^2 + 3.1661* P(:, 1).^2 .* P(:, 4)+19.84* P(:, 1).^2 .* P(:, 3);
     
    case 4
        q1=2;
        q2=2;
        g(:,1) = ((sqrt(2).* P(:, 1)+ P(:, 2))./(sqrt(2).* P(:, 1).^2+2.* P(:, 1).* P(:, 2))).*q1-q2;
        g(:,2) = (( P(:, 2))./(sqrt(2).* P(:, 1).^2+2.* P(:, 1).* P(:, 2))).*q1-q2;
        g(:,3) = (1./(sqrt(2).* P(:, 2)+ P(:, 1))).*q1-q2;
        f=(2.*sqrt(2).*P(:, 1)+P(:, 2)).*100;
        
    case 5
         g(:,1)=27./(P(:, 1).*P(:, 2).^2.*P(:, 3))-1;
         g(:,2)=397.5./(P(:, 1).*P(:, 2).^2.*P(:, 3).^2)-1;
         g(:,3)= (1.93.*P(:, 4).^3)./(P(:, 2).*P(:, 3).*P(:, 6).^4)-1;
         g(:,4)=(1.93.*P(:, 5).^3)./(P(:, 2).*P(:, 3).*P(:, 7).^4)-1;
         g(:,5)=((sqrt(((745.*P(:, 4))./(P(:, 2).*P(:, 3))).^2+16.9e6))./(110.*P(:, 6).^3))-1;
         g(:,6)=((sqrt(((745.*P(:, 5))./(P(:, 2).*P(:, 3))).^2+157.5e6))./(85.*P(:, 7).^3))-1;
         g(:,7)=((P(:, 2).*P(:, 3))./40)-1;
         g(:,8)=(5.*P(:, 2)./P(:, 1))-1;
         g(:,9)=(P(:, 1)./12.*P(:, 2))-1;
         g(:,10)= ((1.5.*P(:, 6)+1.9)./P(:, 4))-1;
         g(:,11)= ((1.1.*P(:, 7)+1.9)./P(:, 5))-1;
         f=0.7854.*P(:, 1).*P(:, 2).^2.*(3.3333.*P(:, 3).^2+14.9334.*P(:, 3)-43.0934)-1.508.*P(:, 1).*(P(:, 6).^2+P(:, 7).^2)+7.4777.*(P(:, 6).^3+P(:, 7).^3)+0.7854.*(P(:, 4).*P(:, 6).^2+P(:, 5).*P(:, 7).^2);  
    case 6
        
      
        g(:,1)= -127+2.*P(:, 1).^2+3.*P(:, 2).^4+P(:, 3)+4.*P(:, 4).^2+5.*P(:, 5);
        g(:,2)= -282+7.*P(:, 1)+3.*P(:, 2)+10.*P(:, 3).^2+P(:, 4)-P(:, 5);
        g(:,3)=-196+23.*P(:, 1)+P(:, 2).^2+6.*P(:, 6).^2-8.*P(:, 7);
        g(:,4) = 4.*P(:, 1).^2+P(:, 2).^2-3.*P(:, 1).*P(:, 2)+2.*P(:, 3).^2+5.*P(:, 6)-11.*P(:, 7);
        f = (P(:, 1)-10).^2+5.*((P(:, 2)-12).^2)+P(:, 3).^4+3.*((P(:, 4)-11).^2)+10.*(P(:, 5).^6)+7.*(P(:, 6).^2)+P(:, 7).^4-4.*P(:, 6).*P(:, 7)-10.*P(:, 6)-8.*P(:, 7);
        
end

% Obtain the fitness
objF= f;
conV = sum(max(0, g), 2);
% 
% num_of_constrain = size(g,2);
% if isempty(weights)
%     weights = ones(1,num_of_constrain);
% end
% 
% weights_p = ones(popsize,num_of_constrain) .* weights;
% 
% if gen <= learningGenNum
%     term = max(0, g);
%     conV = sum(term, 2);
%     
% else
%     term = max(0, g) .* weights_p;
%     conV = sum(term, 2);
% 
% end
